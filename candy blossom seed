-- Script to create and give a "Candy Blossom Seed" tool to players
-- This script should be placed in ServerScriptService in Roblox Studio

-- Function to create the Candy Blossom Seed Tool
local function createCandyBlossomSeedTool()
    local tool = Instance.new("Tool")
    tool.Name = "Candy Blossom Seed [1x]"
    tool.ToolTip = "A sweet Candy Blossom Seed. Oh Dingy"
    tool.RequiresHandle = true
    tool.CanBeDropped = true
    tool.Enabled = true

    -- Adjust Grip properties to make it fit better in hand
    -- GripPos shifts the tool relative to the hand's center.
    -- Negative Y in GripPos moves it "down" in the hand.
    -- Positive Z in GripPos moves it "backward" in the hand.
    tool.GripPos = Vector3.new(0, -0.2, 0.18) -- Adjusted Z to move slightly more backward again
    -- Default grip orientations (can be fine-tuned if needed)
    tool.GripForward = Vector3.new(0, 0, -1)
    tool.GripRight = Vector3.new(1, 0, 0)
    tool.GripUp = Vector3.new(0, 1, 0)

    -- Create the Handle for the tool
    local handle = Instance.new("Part")
    handle.Name = "Handle"
    handle.Parent = tool
    handle.Shape = Enum.PartType.Block
    -- Adjusted size to be overall bigger
    handle.Size = Vector3.new(0.6, 1.0, 0.35) -- Width, Height, Depth
    handle.Color = Color3.fromRGB(173, 216, 230) -- LightBlue base for non-gradient parts
    handle.Material = Enum.Material.SmoothPlastic
    handle.TopSurface = Enum.SurfaceType.Smooth
    handle.BottomSurface = Enum.SurfaceType.Smooth
    handle.Anchored = false
    handle.CanCollide = true

    -- Helper function to create a gradient on a specific face
    local function createFaceGradient(faceName, normalId, isSideFace)
        local surfaceGui = Instance.new("SurfaceGui")
        surfaceGui.Name = faceName .. "GradientGui"
        surfaceGui.Adornee = handle
        surfaceGui.Face = normalId
        surfaceGui.SizingMode = Enum.SurfaceGuiSizingMode.PixelsPerStud
        surfaceGui.PixelsPerStud = 200
        surfaceGui.Parent = handle

        local frame = Instance.new("Frame")
        frame.Name = "GradientFrame"
        frame.Parent = surfaceGui
        frame.Size = UDim2.new(1, 0, 1, 0)
        frame.BackgroundColor3 = handle.Color -- Use handle's base color
        frame.BackgroundTransparency = 0
        frame.BorderSizePixel = 0

        local uiGradient = Instance.new("UIGradient")
        uiGradient.Name = faceName .. "Gradient"
        uiGradient.Parent = frame

        if isSideFace then
            -- Gradient for side faces: Dark blue at top, fading to base color by midpoint
            uiGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 100, 220)),    -- Darker blue at the top edge of the side
                ColorSequenceKeypoint.new(0.5, handle.Color), -- Base color at halfway point
                ColorSequenceKeypoint.new(1, handle.Color)    -- Base color at the bottom edge
            })
            -- Rotation might be needed depending on face orientation (0 or 90 are common)
            -- For Front/Back, usually 0 or 180. For Left/Right, usually 0 or 90 / 270.
            -- This ensures the gradient goes from top-to-bottom of the side face.
            if normalId == Enum.NormalId.Front or normalId == Enum.NormalId.Back then
                 uiGradient.Rotation = 0 -- Or 180 if it's upside down
            elseif normalId == Enum.NormalId.Left or normalId == Enum.NormalId.Right then
                 uiGradient.Rotation = 0 -- Or 90 / 270 if sideways
            end
        else -- Top face
            uiGradient.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.fromRGB(0, 100, 220)),
                ColorSequenceKeypoint.new(0.4, Color3.fromRGB(70, 150, 255)),
                ColorSequenceKeypoint.new(1, handle.Color)
            })
            uiGradient.Rotation = 0 -- Adjust if gradient direction is wrong on top face
        end
        return surfaceGui
    end

    -- Create gradients for specified faces
    createFaceGradient("Top", Enum.NormalId.Top, false)
    createFaceGradient("Front", Enum.NormalId.Front, true)
    createFaceGradient("Back", Enum.NormalId.Back, true)
    createFaceGradient("Left", Enum.NormalId.Left, true)
    createFaceGradient("Right", Enum.NormalId.Right, true)
    -- Note: Bottom face will remain the solid base color.

    -- Script for tool functionality
    local onActivateScript = Instance.new("Script")
    onActivateScript.Name = "ActivateScript"
    onActivateScript.Parent = tool
    onActivateScript.Source = [[
        local tool = script.Parent
        -- local handle = tool:WaitForChild("Handle") -- Not directly used in this basic activate script

        local debounce = false
        local COOLDOWN_TIME = 1 -- Seconds

        tool.Activated:Connect(function()
            if debounce then return end
            debounce = true

            local player = tool.Parent:IsA("Backpack") and tool.Parent.Parent
            if not player then
                player = tool.Parent:IsA("Model") and tool.Parent.Parent -- Character model
                if player and player:IsA("Player") then
                    -- Tool is equipped
                else
                    debounce = false
                    return -- Can't find player
                end
            end

            print(player.Name .. " activated " .. tool.Name)

            -- TODO: Implement your planting logic here.
            print("Planting logic would go here for Candy Blossom Seed.")

            task.wait(COOLDOWN_TIME)
            debounce = false
        end)
    ]]

    return tool
end

-- Function to give the tool to a player when they join
local function onPlayerAdded(player)
    local backpack = player:WaitForChild("Backpack")
    if not backpack:FindFirstChild("Candy Blossom Seed [1x]") then
        local newSeedTool = createCandyBlossomSeedTool()
        newSeedTool.Parent = backpack
        print("Gave Candy Blossom Seed [1x] to " .. player.Name)
    end
end

game.Players.PlayerAdded:Connect(onPlayerAdded)

for _, player in ipairs(game.Players:GetPlayers()) do
    task.spawn(onPlayerAdded, player)
end

print("Candy Blossom Seed Tool Giver script has been loaded and is active.")

--[[
    Further Customization & Notes:

    1.  **Visual Appearance (Handle):**
        * Tool.GripPos Z value has been changed to 0.18 to move the tool slightly more backward in the player's hand.
        * If this is too far back, you can make the value less positive (e.g., 0.15). If it's still not back enough, you can try more positive values (e.g., 0.2).
        * Fine-tuning tool grips is iterative. Test in Studio to see the effect.

    2.  **Inventory Icon (`Tool.TextureId`):**
        * If you have a 2D image for the inventory icon, upload it to Roblox and set the `tool.TextureId` property.

    3.  **Planting Logic (`ActivateScript`):**
        * Remember to implement the actual planting functionality.
]]
